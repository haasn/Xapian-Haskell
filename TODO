TODO
----

* Exceptions:
  * make sure, that any exception in the c bindings is caught
  * document occurences of exceptions
  * throw exceptions instead of returning `IO (Either Error value)` which
      simplifies the API a lot
  * redesign Error consequently
  * is there a good practice regarding how to call 'exceptionable' functions?

* Encoding:
  * can we index Sanskrit? (switch from ByteString to Text)

* Type Safety
  * --

* Testing:
  * Uuuhh..

* Writing 'withForeignPtr' all the time is *visually unpleasant*
* some objects are not being deleted such as iterators. can we reconcile this
  with lazy IO (unsafeInterleaveIO)?
* unpack Op-datatypes in module Query
* what is the best way to create iterators from Haskell to pass to C?
* do we need to ensure a closed writable database on exit?
* unsafePerformIO is bad.

maybe...
* allow for custom stem algorithms in Haskell
* we can optimise queries like HaskellDB does with `optimize :: PrimQuery -> PrimQuery`

from the docs:
* spelling correction
* sorting results
* thesaurus
